from graia.saya import Saya, Channel
from graia.saya.builtins.broadcast.schema import ListenerSchema
from graia.application import GraiaMiraiApplication
from graia.application.event.messages import *
from graia.application.event.mirai import *
from graia.application.message.elements.internal import At, Plain, Image
import spacy
from spacy.lang.zh.examples import sentences
from transformers import AutoModel, AutoTokenizer

nlp = spacy.load("zh_core_web_sm")
# tokenizer = AutoTokenizer.from_pretrained('ELECTRA-small, Chinese')
# model = AutoModel.from_pretrained('ELECTRA-small, Chinese')

# 插件信息
__name__ = "的地得小警察"
__description__ = "检查群消息里的的地得是否正确"
__author__ = "Orenji"
__usage__ = "自动被调用"

saya = Saya.current()
channel = Channel.current()

channel.name(__name__)
channel.description(f"{__description__}\n使用方法：{__usage__}")
channel.author(__author__)


@channel.use(ListenerSchema(listening_events=[GroupMessage]))
async def group_message_listener(
    app: GraiaMiraiApplication,
    message: MessageChain,
    sender: Member,
    group: Group
):

    text = message.asDisplay()
    #if text == "好": print("a")
    doc = nlp(text)
    words = [token.text for token in doc]
    pos = [token.pos_ for token in doc]
    n = len(words)
    msg = ""
    print(words, '\n', pos)
    # for p in pos:
    #     spacy.explain(p)
    for i in range(n):
        if words[i] == "的":
            if i != 0 and pos[i - 1] == 'ADV':
                msg += "的->地！"
                break
            elif i != n-1 and pos[i+1] == 'VERB':
                msg += "的->得！"
                break
        elif words[i] == "得":
            if i != 0 and pos[i-1] in ["PRON", "NOUN"]:
                msg += "得->的！"
                break
            elif i != 0 and pos[i - 1] == 'ADV':
                msg += "得->地！"
                break
        elif words[i] == "地":
            if i != 0 and pos[i-1] in {'PRON'}:
                msg += "地->的！"
                break
            elif i != n-1 and pos[i+1] == "VERB":
                msg += "地->得！"
                break

    if msg: await app.sendGroupMessage(group, MessageChain.create([Plain(msg)]).asSendable())
